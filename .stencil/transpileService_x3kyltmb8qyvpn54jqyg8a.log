{"moduleFile":{"sourceFilePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/blog-component/blog-component.tsx","jsFilePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/blog-component/blog-component.js","cmps":[{"isLegacy":false,"tagName":"blog-component","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"BlogIndex","elementRef":null,"encapsulation":"none","properties":[{"name":"page","type":"string","attribute":"page","reflect":false,"mutable":false,"required":false,"optional":true,"complexType":{"original":"string","resolved":"string | undefined","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[],"methods":[],"listeners":[],"events":[],"watchers":[],"styles":[{"modeName":"$","styleId":"BLOG-COMPONENT","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/blog-component/blog-component.css","relativePath":"blog-component.css","originalComponentPath":"blog-component.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/blog-component/blog-component.js","sourceFilePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/blog-component/blog-component.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":true,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":true,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":false,"hasPropString":true,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":false,"hasStyle":true,"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":true,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":false,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":["class","href","name","alt","src"],"htmlTagNames":["div","a","app-icon","h1","span","img"],"isUpdateable":true,"potentialCmpRefs":["app-icon"]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":["meta","meta"],"isCollectionDependency":false,"isLegacy":false,"localImports":["/Users/fernandofuentes/github/stenciljs-template/src/assets/blog/list.json","/Users/fernandofuentes/github/stenciljs-template/src/global/site-structure-utils"],"originalCollectionComponentPath":null,"originalImports":["@stencil/core","../../assets/blog/list.json","../../global/site-structure-utils"],"potentialCmpRefs":[]},"jsText":"import { h, Build } from \"@stencil/core\";\r\nimport blogStructure from '../../assets/blog/list.json';\r\nimport { fileNotFound } from '../../global/site-structure-utils';\r\nexport class BlogIndex {\r\n    async componentWillRender() {\r\n        if (this.page) {\r\n            const post = this.data = blogStructure.find(blog => blog.url === this.page);\r\n            if (!Build.isBrowser && !post) {\r\n                fileNotFound();\r\n                return;\r\n            }\r\n            if (post && post.filePath) {\r\n                insertMetaTags(post);\r\n                document.title = post.title;\r\n                this.content = await fetchContent(post.filePath);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        if (!this.data || !this.content) {\r\n            return;\r\n        }\r\n        const post = this.data;\r\n        const content = this.content;\r\n        return (h(\"div\", { class: \"container\" },\r\n            h(\"div\", { class: \"share-links\" },\r\n                h(\"div\", { class: \"sticky\" },\r\n                    h(\"a\", { href: `http://twitter.com/home?status=${post.title}`, class: \"twitter\", onClick: function (ev) {\r\n                            ev.preventDefault();\r\n                            window.open(this.href, 'Share via Twitter', 'width=400, height=300');\r\n                        } },\r\n                        h(\"app-icon\", { name: \"twitter\" })),\r\n                    h(\"a\", { href: `http://www.facebook.com/share.php?u=${window.location.href}&title=${post.title}`, class: \"facebook\", onClick: function (ev) {\r\n                            ev.preventDefault();\r\n                            window.open(this.href, 'Share via Facebook', 'width=555, height=656');\r\n                        } },\r\n                        h(\"app-icon\", { name: \"facebook\" })),\r\n                    h(\"a\", { href: `http://www.linkedin.com/shareArticle?mini=true&url=${window.location.href}&title=${post.title}`, class: \"linkedin\", onClick: function (ev) {\r\n                            ev.preventDefault();\r\n                            window.open(this.href, 'Share via LinkedIn', 'width=500, height=600');\r\n                        } },\r\n                        h(\"app-icon\", { name: \"linkedin\" })))),\r\n            h(\"div\", { class: \"blog-content\" },\r\n                h(\"h1\", null, post.title),\r\n                h(\"span\", { class: \"post-meta\" },\r\n                    h(\"a\", { href: `http://twitter.com/${post.twitter}` },\r\n                        h(\"img\", { alt: `Author: ${post.author}`, class: \"post-author-image\", src: `/assets/img/blog/authors/${post.twitter}.jpg` })),\r\n                    h(\"a\", { class: \"post-author-name\", href: `http://twitter.com/${post.twitter}` }, post.author),\r\n                    h(\"span\", { class: \"post-date\" }, post.date)),\r\n                toHypertext(content.hypertext))));\r\n    }\r\n    static get is() { return \"blog-component\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"blog-component.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"blog-component.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"page\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string | undefined\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": true,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"page\",\r\n            \"reflect\": false\r\n        }\r\n    }; }\r\n}\r\nconst insertMetaTags = (post) => {\r\n    createOgTag('og:title', `Stencil Blog - ${post.title}`);\r\n    createOgTag('og:description', post.description);\r\n    createOgTag('og:url', window.location.href);\r\n    createOgTag('og:image', `${window.location.origin}${post.img}`);\r\n    createTwitterTag('twitter:card', `summary`);\r\n    createTwitterTag('twitter:title', post.title);\r\n    createTwitterTag('twitter:description', post.description);\r\n    createTwitterTag('twitter:image', `${window.location.origin}${post.img}`);\r\n    if (post.twitter) {\r\n        createTwitterTag('twitter:creator', `@${post.twitter}`);\r\n    }\r\n};\r\nconst createOgTag = (type, content) => {\r\n    let el = document.head.querySelector(`meta[property=\"${type}\"]`);\r\n    if (!el) {\r\n        el = document.createElement('meta');\r\n        el.setAttribute('property', type);\r\n        el.setAttribute('content', content);\r\n        document.head.appendChild(el);\r\n    }\r\n    else {\r\n        el.setAttribute('property', type);\r\n        el.setAttribute('content', content);\r\n    }\r\n};\r\nconst createTwitterTag = (type, content) => {\r\n    let el = document.head.querySelector(`meta[name=\"${type}\"]`);\r\n    if (!el) {\r\n        el = document.createElement('meta');\r\n        el.setAttribute('name', type);\r\n        el.setAttribute('content', content);\r\n        document.head.appendChild(el);\r\n    }\r\n    else {\r\n        el.setAttribute('name', type);\r\n        el.setAttribute('content', content);\r\n    }\r\n};\r\nconst localCache = new Map();\r\nconst fetchContent = (path) => {\r\n    let promise = localCache.get(path);\r\n    if (!promise) {\r\n        console.log('fetchContent', path);\r\n        promise = fetch(path).then(response => response.json());\r\n        localCache.set(path, promise);\r\n    }\r\n    return promise;\r\n};\r\nconst toHypertext = (data) => {\r\n    if (!Array.isArray(data)) {\r\n        console.error('content error, hypertext is undefined');\r\n        return null;\r\n    }\r\n    const args = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        let arg = data[i];\r\n        if (i === 0 && typeof arg === 'string' && tagBlacklist.includes(arg.toLowerCase().trim())) {\r\n            arg = 'template';\r\n        }\r\n        else if (i === 1 && arg) {\r\n            const attrs = {};\r\n            Object.keys(arg).forEach(key => {\r\n                const k = key.toLowerCase();\r\n                if (!k.startsWith('on') && k !== 'innerhtml') {\r\n                    attrs[key] = arg[key];\r\n                }\r\n            });\r\n            arg = attrs;\r\n        }\r\n        else if (i > 1) {\r\n            if (Array.isArray(arg)) {\r\n                arg = toHypertext(arg);\r\n            }\r\n        }\r\n        args.push(arg);\r\n    }\r\n    return h.apply(null, args);\r\n};\r\nconst tagBlacklist = ['script', 'link', 'meta', 'object', 'head', 'html', 'body'];\r\n"}