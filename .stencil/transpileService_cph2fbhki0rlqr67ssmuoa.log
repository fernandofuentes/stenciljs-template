{"moduleFile":{"sourceFilePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/glshader/glshader.tsx","jsFilePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/glshader/glshader.js","cmps":[{"isLegacy":false,"tagName":"pro-glshader","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"GLShader","elementRef":"el","encapsulation":"shadow","properties":[{"name":"ready","type":"boolean","attribute":"ready","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"true","complexType":{"original":"boolean","resolved":"boolean","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"vert","type":"string","attribute":"vert","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"DEFAULT_VERT","complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"retina","type":"boolean","attribute":"retina","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"false","complexType":{"original":"boolean","resolved":"boolean","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"media","type":"string","attribute":"media","reflect":false,"mutable":false,"required":false,"optional":true,"complexType":{"original":"string","resolved":"string | undefined","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"frag","type":"string","attribute":"frag","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"DEFAULT_FRAG","complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"uniforms","type":"any","attribute":"uniforms","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"{}","complexType":{"original":"any","resolved":"any","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[{"name":"enabled"}],"methods":[],"listeners":[],"events":[],"watchers":[{"propName":"vert","methodName":"shaderChanged"},{"propName":"frag","methodName":"shaderChanged"},{"propName":"uniforms","methodName":"uniformsChanged"}],"styles":[{"modeName":"$","styleId":"PRO-GLSHADER","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/glshader/glshader.css","relativePath":"glshader.css","originalComponentPath":"glshader.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/glshader/glshader.js","sourceFilePath":"/Users/fernandofuentes/github/stenciljs-template/src/components/glshader/glshader.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":true,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":true,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":true,"hasPropString":true,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":true,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":false,"hasWatchCallback":true,"isPlain":false,"htmlAttrNames":[],"htmlTagNames":["canvas"],"isUpdateable":true,"potentialCmpRefs":[]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@stencil/core"],"potentialCmpRefs":[]},"jsText":"import { h, Build } from \"@stencil/core\";\r\nconst DEFAULT_VERT = `attribute vec2 a_position;\nvoid main() {gl_Position = vec4(a_position, 0, 1);}`;\r\nconst DEFAULT_FRAG = `void main() {gl_FragColor = vec4(0, 0, 0, 1);}`;\r\nexport class GLShader {\r\n    constructor() {\r\n        this.glPosBuffer = null;\r\n        this.glProgram = null;\r\n        this.gl = null;\r\n        this.enabled = true;\r\n        this.ready = true;\r\n        this.vert = DEFAULT_VERT;\r\n        this.retina = false;\r\n        this.frag = DEFAULT_FRAG;\r\n        this.uniforms = {};\r\n    }\r\n    shaderChanged() {\r\n        this.compileShader();\r\n        this.resolveUniforms();\r\n        this.renderGL();\r\n    }\r\n    uniformsChanged() {\r\n        this.resolveUniforms();\r\n        this.renderGL();\r\n    }\r\n    componentDidLoad() {\r\n        if (Build.isBrowser && this.canvas) {\r\n            this.resize();\r\n            const gl = this.gl = this.canvas.getContext('webgl');\r\n            gl.getExtension('OES_standard_derivatives');\r\n            gl.getExtension('EXT_shader_texture_lod');\r\n            if (!gl) {\r\n                console.warn('webgl is not available');\r\n                this.canvas = undefined;\r\n                this.enabled = false;\r\n                return;\r\n            }\r\n            this.initGL();\r\n            this.compileShader();\r\n            this.resolveUniforms();\r\n            this.renderGL();\r\n        }\r\n    }\r\n    resize() {\r\n        const canvas = this.canvas;\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        const f = (this.retina) ? window.devicePixelRatio : 1;\r\n        // Lookup the size the browser is displaying the canvas.\r\n        const displayWidth = canvas.clientWidth * f;\r\n        const displayHeight = canvas.clientHeight * f;\r\n        // Check if the canvas is not the same size.\r\n        if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\r\n            // Make the canvas the same size\r\n            canvas.width = displayWidth;\r\n            canvas.height = displayHeight;\r\n            if (this.gl) {\r\n                this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\r\n            }\r\n        }\r\n    }\r\n    resolveUniforms() {\r\n        const gl = this.gl;\r\n        if (!gl) {\r\n            return;\r\n        }\r\n        const uniforms = this.uniforms;\r\n        const keys = Object.keys(uniforms);\r\n        gl.useProgram(this.glProgram);\r\n        for (let key of keys) {\r\n            const [prefix, uniform] = key.split(':', 2);\r\n            const loc = gl.getUniformLocation(this.glProgram, uniform);\r\n            const value = uniforms[key];\r\n            gl['uniform' + prefix](loc, value);\r\n        }\r\n    }\r\n    initGL() {\r\n        const gl = this.gl;\r\n        if (!gl) {\r\n            return;\r\n        }\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        const positionBuffer = this.glPosBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n        const positions = new Float32Array([\r\n            1.0, 1.0, -1.0, 1.0,\r\n            1.0, -1.0, -1.0, -1.0,\r\n        ]);\r\n        gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\r\n    }\r\n    compileShader() {\r\n        const gl = this.gl;\r\n        if (!gl) {\r\n            return;\r\n        }\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n        gl.shaderSource(vertexShader, this.vert);\r\n        gl.compileShader(vertexShader);\r\n        const log = gl.getShaderInfoLog(vertexShader);\r\n        if (log) {\r\n            console.debug(log);\r\n        }\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        gl.shaderSource(fragmentShader, this.frag);\r\n        gl.compileShader(fragmentShader);\r\n        const log2 = gl.getShaderInfoLog(fragmentShader);\r\n        if (log2) {\r\n            console.debug(log2);\r\n        }\r\n        const program = this.glProgram = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n    }\r\n    renderGL() {\r\n        const gl = this.gl;\r\n        if (!gl) {\r\n            return;\r\n        }\r\n        if (!this.ready) {\r\n            gl.clearColor(0.03, 0.05, 0.07, 1.0);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n            gl.flush();\r\n            return;\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.glPosBuffer);\r\n        const positionLocation = gl.getAttribLocation(this.glProgram, \"a_position\");\r\n        gl.enableVertexAttribArray(positionLocation);\r\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\r\n        gl.useProgram(this.glProgram);\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n    }\r\n    render() {\r\n        if (this.enabled) {\r\n            this.resize();\r\n            return h(\"canvas\", { ref: el => this.canvas = el });\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    static get is() { return \"pro-glshader\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"glshader.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"glshader.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"ready\": {\r\n            \"type\": \"boolean\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"boolean\",\r\n                \"resolved\": \"boolean\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"ready\",\r\n            \"reflect\": false,\r\n            \"defaultValue\": \"true\"\r\n        },\r\n        \"vert\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"vert\",\r\n            \"reflect\": false,\r\n            \"defaultValue\": \"DEFAULT_VERT\"\r\n        },\r\n        \"retina\": {\r\n            \"type\": \"boolean\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"boolean\",\r\n                \"resolved\": \"boolean\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"retina\",\r\n            \"reflect\": false,\r\n            \"defaultValue\": \"false\"\r\n        },\r\n        \"media\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string | undefined\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": true,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"media\",\r\n            \"reflect\": false\r\n        },\r\n        \"frag\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"frag\",\r\n            \"reflect\": false,\r\n            \"defaultValue\": \"DEFAULT_FRAG\"\r\n        },\r\n        \"uniforms\": {\r\n            \"type\": \"any\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"any\",\r\n                \"resolved\": \"any\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"uniforms\",\r\n            \"reflect\": false,\r\n            \"defaultValue\": \"{}\"\r\n        }\r\n    }; }\r\n    static get states() { return {\r\n        \"enabled\": {}\r\n    }; }\r\n    static get elementRef() { return \"el\"; }\r\n    static get watchers() { return [{\r\n            \"propName\": \"vert\",\r\n            \"methodName\": \"shaderChanged\"\r\n        }, {\r\n            \"propName\": \"frag\",\r\n            \"methodName\": \"shaderChanged\"\r\n        }, {\r\n            \"propName\": \"uniforms\",\r\n            \"methodName\": \"uniformsChanged\"\r\n        }]; }\r\n}\r\n"}